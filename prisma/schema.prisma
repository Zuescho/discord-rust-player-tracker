// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Player {
  id               String            @id
  name             String

  currentServer    Server?           @relation(fields: [serverId], references: [id])
  serverId         String?
  sessionsUpdatedAt DateTime         @default(now())

  sessions         PlaySession[]
  playerTracks     PlayerTrack[]
}

model PlaySession {
  id               String           @id
  start            DateTime
  stop             DateTime?
  player           Player           @relation(fields: [playerId], references: [id])
  playerId         String
  server           Server           @relation(fields: [serverId], references: [id])
  serverId         String
}

model Guild {
  id               String           @id
  name             String

  trackedServers   GuildServerTrack[]
}

model GuildServerTrack {
  channelName      String
  channelId        String            @unique
  server           Server            @relation(fields: [serverId], references: [id])
  serverId         String
  guild            Guild             @relation(fields: [guildId], references: [id])
  guildId          String

  trackedPlayers   PlayerTrack[]
  notificationReceivers NotificationReceiver[]
  persistentMessages PersistentMessage[]

  @@id([channelId, guildId])
}

model PlayerTrack {
  player           Player            @relation(fields: [playerId], references: [id])
  playerId         String
  guildServer      GuildServerTrack  @relation(fields: [guildId, channelId], references: [guildId, channelId], onDelete: Cascade)
  channelId        String
  guildId          String


  nickname         String
  notes            String?

  @@id([playerId, channelId, guildId])
}

model PersistentMessage {
  id               String            @id
  pageIndex        Int
  key              String
  guildServer      GuildServerTrack  @relation(fields: [channelId, guildId], references: [channelId, guildId], onDelete: Cascade)
  channelId        String
  guildId          String
}

model User {
  id               String            @id
  notifications    NotificationReceiver[]
}

model NotificationReceiver {
  user             User              @relation(fields: [userId], references: [id])
  userId           String

  guildServer      GuildServerTrack  @relation(fields: [guildServerGuildId, guildServerChannelId], references: [guildId, channelId], onDelete: Cascade)
  guildServerGuildId String
  guildServerChannelId String

  @@id([userId, guildServerGuildId, guildServerChannelId])
}

model Server {
  id       String                    @id
  name     String
  wipe     DateTime
  mapUrl   String?
  mapPreview String?
  updatedAt DateTime                 @updatedAt

  players  Player[]
  sessions PlaySession[]
  guildServerTracks GuildServerTrack[]
}
